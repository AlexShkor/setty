{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Setty","google":"","body":"Overview\r\n---------------------\r\nSetty was designed to help manage project key/value settings. .NET config files differ for different deployment configurations. There should be a way to manage config files for different deployment configurations. Setty chose centralized approach by generating *.config files based on some template language. Currently there is support for razor and xslt transformation engines. \r\n\r\nConfig files produced by templates which don't transform anything but actually used as trivial xml generating language. Reading of this templates is as easy as reading of plain config file. Setty can transforms two files - App.config.cshtml(xslt) and Web.config.cshtml(xslt). Result of transformation will be places to App.config and Web.config (**overwriting all existent content!**) Setty was designed to be used without requirement to reference any Setty assembles by your project. Thats mean that Setty can be used as built-time and management-time component. Setty was designed to be used both by web applications and desktop applications. Setty was designed to work well with any existing config management solutions, like Visual Studio Config Transformation, Web Deployment Project etc.. It's normal to use both Setty and Visual Studio Config Transformation. However, with Setty it is possible to change .NET config files without the needs to build or deploy project (thus it is not only build- or deploy-time component, it is also management-time component)\r\n\r\nSetty with razor syntax require .net 4.0+. .net 2.0 version currently support only xslt transformation engine and has to be installed manually. See documentation below for details\r\n\r\nInstallation guide\r\n---------------------\r\nThe best way to getting started with Setty is download plugin for visual studio 2010. And install Setty in one click.\r\nPlugin will configure everything for you.\r\n\r\n1. Open Visual Studio and navigate to Tools -> Extensions Manager. \r\n2. Search in Visual Studio Online Gallery for word 'Setty' and double click to install (reload Visual Studio after installation). Or alternatively download extension [Setty VS 2010 addin](https://github.com/downloads/paralect/setty/Setty.VsAddin.vsix) \r\n![add vs extension](images/add_vs_extention.png)\r\n3. Create new project (or open existing one), right click on it. In context menu navigate to Add -> Add Setty... \r\n![add vs extension](images/add_setty.png)\r\n4. Plugin will ask you where to create a global settings folder. Usually this folder place is on top of solution folder. \r\n![add vs extension](images/browse_settings_folder.png)\r\n5. Congratulations! You are done. Now you can start use Setty.\r\n\r\nQuick start\r\n---------------------\r\nBy default Setty use <a href=\"http://www.microsoft.com/web/category/razor\">Razor syntax</a> to transform Setty configs (Web.config.cshtml on above screen). \r\n  Settings Folder is a simple concept of hierarchical configuration system well understood by many ASP.NET developers. The more deeper your configuration file is located the more precedence your configuration file has comparing to outer configuration files. This is a simple way to overwrite outer configuration. Here is example settings folder from real project:\r\n\r\n![example](settings_folder.png)\r\n\r\nTo try it out navigate to the settings folder which you've specified on 4th step. There you'll find App.config file. This file is a simple storage of key/value settings. Settings Folder has only one configuration file named App.config. Content of this file is a plain .NET appSettings section. \r\n\r\nOpen it and add new key/value setting:\r\n``` xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <appSettings>\r\n  \t<add key=\"hello\" value=\"Hello World\"/>\r\n  </appSettings>\r\n</configuration>\r\n```\r\nAfter this open Setty config file  (In my case it's Web.config.cshtml) and use setting as follow:\r\n``` xml\r\n<configuration>\r\n  <appSettings>\r\n    <add key=\"MyFirstSetting\" value=\"@Model[\"hello\"]\" />\r\n    ...\r\n```\r\nRebuild project and open Web.config file, there should be following result:\r\n``` xml\r\n<configuration>\r\n  <appSettings>\r\n    <add key=\"MyFirstSetting\" value=\"Hello World\" />\r\n    ...\r\n```\r\nWith razor template template engine Model is actually `Dictionary<string, string>`, because of this to read some value you have to write something like this: `@Model[\"hello\"]`. We chose this approach instead of dynamic model - `@Model.hello`, because settings usually contains some specific characters that not allowed in property names in .net. \r\n\r\nWhen you start project you usually will need just read all setting into appSettings section within config file. For this purpose Setty has special property: `ApplicationSettings`. So to read all settings you just need following code:  `@Model[\"ApplicationSettings\"]`.\r\n\r\nReal world Setty config files\r\n---------------------\r\n\r\nBelow example show not only how to use Setty, but also flexibility that Setty provide by adding support\r\nof variables, conditions, whatever transformation language support.\r\n\r\nRazor transformation engine:\r\n\r\n``` xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <configuration>    \r\n\r\n      <appSettings>\r\n        <add key=\"Name\" value=\"@Model[\"Name\"]\" />\r\n        <add key=\"Email\" value=\"@Model[\"Email\"]\" />\r\n      </appSettings> \r\n\r\n      <system.web>\r\n        <sessionState mode=\"SQLServer\" sqlConnectionString=\"@Model[\"StateServer\"]\" />\r\n      </system.web> \r\n\r\n      <compilation debug=\"@Model[\"Debug\"]\" targetFramework=\"4.0\" /> \r\n\r\n      @if(Model[\"Email\"] == \"Compress\")\r\n       {\r\n        <httpCompression>\r\n          <scheme name=\"gzip\" dll=\"%Windir%\\system32\\inetsrv\\gzip.dll\" />\r\n          <dynamicTypes>\r\n            <add mimeType=\"text/*\" enabled=\"true\" />\r\n            ...\r\n          </dynamicTypes>\r\n        </httpCompression> \r\n       }     \r\n          ...\r\n\r\n    </configuration>\r\n\r\n      \r\n```\r\n\r\nXslt transformation engine:\r\n\r\n\r\n``` xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<xsl:stylesheet version=\"1.0\"\r\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n                xmlns:c=\"http://core.com/config\"> \r\n\r\n  <xsl:template match=\"/\">\r\n    <configuration>    \r\n\r\n      <appSettings>\r\n        <add key=\"Name\" value=\"{c:Value('Name')}\" />\r\n        <add key=\"Email\" value=\"{c:Value('Email')}\" />\r\n      </appSettings> \r\n\r\n      <system.web>\r\n        <sessionState mode=\"SQLServer\" sqlConnectionString=\"{c:Value('StateServer')}\" />\r\n      </system.web> \r\n\r\n      <compilation debug=\"{c:Value('Debug')}\" targetFramework=\"4.0\" /> \r\n\r\n      <xsl:if test=\"c:Value('Compress') = 'true'\">\r\n\r\n        <httpCompression>\r\n          <scheme name=\"gzip\" dll=\"%Windir%\\system32\\inetsrv\\gzip.dll\" />\r\n          <dynamicTypes>\r\n            <add mimeType=\"text/*\" enabled=\"true\" />\r\n            ...\r\n          </dynamicTypes>\r\n        </httpCompression>\r\n\r\n      </xsl:if> \r\n\r\n      ...\r\n\r\n    </configuration>\r\n\r\n  </xsl:template> \r\n\r\n</xsl:stylesheet>\r\n\r\n```\r\n\r\n.setty file\r\n---------------------\r\nSetty use .setty file to locate settings folder for the current environment.\r\n\r\n1.Usually you will need only one .setty for the all solution projects.\r\n \r\n Without any special arguments setty.exe will start search for .setty file at the current directory. If .setty not presented in the current directory it will look into the parent, and so on up to the disc root. Usually you will have only one .setty file for the all projects. Below you can see real project structure with one .setty file that used to transform config files of 2 projects:\r\n\r\n``` text \r\nD:\\\\MyProject\\\r\n     settings\r\n      App.config\r\n         Stage\r\n             App.config\r\n         Production\r\n             App.config\r\n\r\n     source                \r\n         Project1Folder\r\n             web.config.cshtml\r\n         Project2Folder\r\n             app.config.cshtml\r\n      .setty\r\n```\r\n\r\n 2.Separate .setty file for particular project\r\n\r\nTo use separate settings for particular project you can just put .setty near *.config.cshtml and it will be used to locate settings.\r\n\r\n 3.Content of the .setty file\r\n\r\nPath file can contains FULL or RELATIVE path to the settings folder.\r\nExamples of path file content(based on above project structure):\r\n\r\n  * `D:\\\\MyProject\\settings\\Stage` \r\n  * `../settings` (relative path should not starts from slash, because it will be treat as absolute path)\r\n\r\n\r\nSetty and version of control \r\n---------------------\r\n\r\nThe .setty file should not be under your source control system, because in most situations developers and different environments has different paths within .setty and you will have conflicts each time when you pulling latest version. \r\nSame apply for any *.config file, because Setty always regenerate it you need add it to ignore as well.\r\n\r\n\r\nHow to install the Setty project\r\n---------------------\r\n\r\nBefore run solution you have to install some tools. If you have some of them already installed - just skip a step.\r\n\r\n1.Clone the project from github:\r\n\r\n `git clone git@github.com:paralect/setty.git`\r\n\r\n2.<a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=17630\">Download</a> and install ILMerge. It used to merge some external libraries into single .exe file.\r\n\r\n3.<a href=\"https://github.com/downloads/loresoft/msbuildtasks/MSBuild.Community.Tasks.v1.4.0.42.msi\"> Download </a> and install MsBuild community tasks.\r\nAbove three steps should be enough to open and compile all solution projects except VS add-in project.\r\n\r\n4.To open Setty.VsAddin project <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=21835\">download</a> and install visual studio sdk as well as <a href=\"http://visualstudiogallery.msdn.microsoft.com/e9f40a57-3c9a-4d61-b3ec-1640c59549b3/\">VSPackage Builder</a> plugin\r\n\r\n5.Restart Visual studio and open solution again. Congratulations! You are done!\r\n\r\n\r\nExtend Setty with your favorite transformation engine\r\n---------------------\r\n\r\nFork the Setty project and install it.\r\n\r\nTo add new transformation language into the project open Setty Project within Setty solution and implement `ITransformer` interface (put realization and all related files under Engines folder).\r\nThis interface has one method `void Transform(String inputFilePath, String outputFilePath, KeyValueConfigurationCollection settings)` \r\nTransformer accept path to the config file, transform it with key/value settings and save result to the output config file. Also in interface you need to specify `ConfigExtention` for a new engine (for example: xslt, cshtml). Setty will automatically choose transformer by ConfigExtention property. Once interface implemented add new engine config files names into `SettyConstants.SearchConfigsNames`. For more details just look into the current implementations for razor and xslt.\r\n\r\nAll externals libs should be merged into the Setty.dll and Setty.exe files. To add them unload Setty project and modify following section at the bottom of .csproj file. After this do the same at Setty.Host project.\r\n\r\n``` xml\r\n<Target Name=\"AfterBuild\" Condition=\"$(Configuration) == 'Publish'\">\r\n    <ItemGroup>\r\n      <InputAssemblies Include=\"$(OutputPath)\\Setty.dll\" />\r\n      <InputAssemblies Include=\"$(OutputPath)\\Setty.Settings.dll\" />\r\n      <InputAssemblies Include=\"$(OutputPath)\\RazorEngine.dll\" />\r\n      <InputAssemblies Include=\"$(OutputPath)\\System.Web.Razor.dll\" />\r\n    </ItemGroup>\r\n    <Message Text=\"Merging assemblies...\" />\r\n    <MakeDir Directories=\"$(OutputPath)\\Published\" />\r\n    <ILMerge TargetPlatformVersion=\"v4\" InputAssemblies=\"@(InputAssemblies)\" OutputFile=\"$(OutputPath)\\Published\\Setty.dll\" DebugInfo=\"false\" />\r\n</Target>\r\n```\r\n\r\nCongratulations! You are done. <a href=\"https://help.github.com/articles/using-pull-requests/\">Send us pull request</a> and we will merge it in.\r\n\r\nSetty and NuGet\r\n---------------------\r\n\r\nSome nugets can automatically modify your config files, but because of Setty always regenerate them you can loose these changes on next build.\r\nSo developer should manually copy config changes made by nuget  into setty config file. \r\n\r\nThis is not always bad, because some of the nugets can do crazy things with your config and add stuff that you don't like to see in config.\r\n\r\n\r\nManual Setty Installation (Based on xslt transformation engine)\r\n---------------------\r\n\r\nIn your existing project add corresponding configuration template file just near your normal configuration file (App.config or Web.config). Name this template by adding .xslt extension to the file (App.config.xslt or Web.config.xslt). Start with the following template:\r\n\r\n``` xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<xsl:stylesheet version=\"1.0\" exclude-result-prefixes=\"c\" \r\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n                xmlns:c=\"http://setty.org/config\">\r\n\r\n  <xsl:template match=\"/\">\r\n      <!-- Place your configuration here -->\r\n  </xsl:template>\r\n\r\n</xsl:stylesheet>\r\n\r\n```\r\n\r\nNow just copy full content of App.config to this template. By doing this you will receive the same App.config file after transformation. Integration with build process (via MSBuild) If your project should produce configuration file - then add the following lines to the end of *.csproj file:\r\n\r\n``` xml\r\n<Target Name=\"Setty\" BeforeTargets=\"PreBuildEvent\">\r\n  <Exec Command=\"&quot;$(MSBuildProjectDirectory)\\..\\setty.exe&quot; /silent\" />\r\n</Target>\r\n\r\n```\r\n\r\nWith each build your configuration file will be produced by Setty.exe. \r\nYou should place Setty.exe file in the folder were your *.sln file exists (or choose any location you like and reflect this in MSBuild Exec task definition). You even can register Setty.exe in your PATH environment variable - but in this case your project will depend on system configuration.\r\n\r\nBTW: VS 2010 plugin do almost same steps.\r\n\r\n  ","tagline":"Setty component solves two common problems - management of key-value settings and management of .NET config files (App.config and Web.config)"}